--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.....................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.351987 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.694043 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.690854 seconds
Speedup: 679%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 150% achieved: 679% : PASS

-------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.......................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.375488 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.731365 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.707140 seconds
Speedup: 669%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 200% achieved: 669% : PASS

----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.............................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.379027 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.694841 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.702375 seconds
Speedup: 668%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 250% achieved: 668% : PASS

---------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^....................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.371753 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.384415 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.672874 seconds
Speedup: 651%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 300% achieved: 651% : PASS

---------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.374034 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.764347 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.663634 seconds
Speedup: 717%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 350% achieved: 717% : PASS

-----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^......................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.376104 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.594133 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.711623 seconds
Speedup: 645%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 400% achieved: 645% : PASS

--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^........................................................................................
Numbers: 500,000 Lists: 1 Cores: 10
Generating 500,000 random numbers... 
Generating expected results... 
Generate time: 0.357247 seconds
Running ParallelRadixSort.msd() with 1 core... 
1
Single Elapsed time: 4.893858 seconds
Running ParallelRadixSort.msd() with 10 cores
10
Cores Elapsed time: 0.736579 seconds
Speedup: 664%
Comparing results... 
List 0 PASS
Speedup lists: 1 cores: 10 required: 450% achieved: 664% : PASS

----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^